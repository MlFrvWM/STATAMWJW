local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MlFrvWM/BBLT81/main/BL81827TC", true))()

local window = library:AddWindow("1987 Private", {
    main_color = Color3.fromRGB(0, 0, 0),
    min_size = Vector2.new(740, 500),
    can_resize = false,
})

local function setFontRecursive(guiObject, font)
    for _, obj in pairs(guiObject:GetDescendants()) do
        if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
            obj.Font = font
        end
    end
end

spawn(function()
    repeat wait() until window.gui
    setFontRecursive(window.gui, Enum.Font.SourceSansBold)
end)

local statsTab = window:AddTab("Stats")

local timeLabel = statsTab:AddLabel("‚è∞ Time:\n0d 0h 0m 0s")
local rebirthPaceLabel = statsTab:AddLabel("Rebirth Pace: 0.00/Hour | 0.00/Day")
local strengthPaceLabel = statsTab:AddLabel("Strength Pace: 0.00/Hour | 0.00/Day")
local durabilityPaceLabel = statsTab:AddLabel("Durability Pace: 0.00/Hour | 0.00/Day")

statsTab:AddLabel("")
statsTab:AddLabel("üìä Stats:")
local strengthLabel = statsTab:AddLabel("Strength: 0 | Gained: 0")
local durabilityLabel = statsTab:AddLabel("Durability: 0 | Gained: 0")
local rebirthLabel = statsTab:AddLabel("Rebirths: 0 | Gained: 0")

local function waitForChildRecursive(parent, name)
    local child = parent:FindFirstChild(name)
    while not child do
        parent.ChildAdded:Wait()
        child = parent:FindFirstChild(name)
    end
    return child
end

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local leaderstats = waitForChildRecursive(player, "leaderstats")
local strengthStat = waitForChildRecursive(leaderstats, "strength")
local durabilityStat = waitForChildRecursive(leaderstats, "durability")
local rebirthsStat = waitForChildRecursive(leaderstats, "rebirths")

repeat task.wait() until strengthStat.Value > 0 or durabilityStat.Value > 0 or rebirthsStat.Value > 0

local startTime = tick()
local startStrength = strengthStat.Value
local startDurability = durabilityStat.Value
local startRebirths = rebirthsStat.Value

local function formatNumber(n)
    if n >= 1e9 then
        return string.format("%.2fB", n / 1e9)
    elseif n >= 1e6 then
        return string.format("%.2fM", n / 1e6)
    elseif n >= 1e3 then
        return string.format("%.2fK", n / 1e3)
    else
        return tostring(math.floor(n))
    end
end

task.spawn(function()
    while true do
        task.wait(1)

        local elapsed = tick() - startTime
        if elapsed < 1 then continue end

        local strength = strengthStat.Value
        local durability = durabilityStat.Value
        local rebirths = rebirthsStat.Value

        local gainedStrength = strength - startStrength
        local gainedDurability = durability - startDurability
        local gainedRebirths = rebirths - startRebirths

        local hours = elapsed / 3600
        local days = elapsed / 86400

        local function safeDiv(a, b) return b > 0 and (a / b) or 0 end

        local strengthPerHour = safeDiv(gainedStrength, hours)
        local strengthPerDay = safeDiv(gainedStrength, days)

        local durabilityPerHour = safeDiv(gainedDurability, hours)
        local durabilityPerDay = safeDiv(gainedDurability, days)

        local rebirthsPerHour = safeDiv(gainedRebirths, hours)
        local rebirthsPerDay = safeDiv(gainedRebirths, days)

        local seconds = math.floor(elapsed % 60)
        local minutes = math.floor((elapsed / 60) % 60)
        local hoursElapsed = math.floor((elapsed / 3600) % 24)
        local daysElapsed = math.floor(elapsed / 86400)

        timeLabel.Text = string.format("‚è∞ Time:\n%dd %dh %dm %ds", daysElapsed, hoursElapsed, minutes, seconds)
        rebirthPaceLabel.Text = string.format("Rebirth Pace: %.2f/Hour | %.2f/Day", rebirthsPerHour, rebirthsPerDay)
        strengthPaceLabel.Text = string.format("Strength Pace: %.2f/Hour | %.2f/Day", strengthPerHour, strengthPerDay)
        durabilityPaceLabel.Text = string.format("Durability Pace: %.2f/Hour | %.2f/Day", durabilityPerHour, durabilityPerDay)

        strengthLabel.Text = string.format("Strength: %s | Gained: %s", formatNumber(strength), formatNumber(gainedStrength))
        durabilityLabel.Text = string.format("Durability: %s | Gained: %s", formatNumber(durability), formatNumber(gainedDurability))
        rebirthLabel.Text = string.format("Rebirths: %s | Gained: %s", formatNumber(rebirths), formatNumber(gainedRebirths))
    end
end)
