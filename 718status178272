local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MlFrvWM/BBLT81/main/BL81827TC", true))()

local window = library:AddWindow("1987 Private", {
    main_color = Color3.fromRGB(0, 0, 0),
    min_size = Vector2.new(740, 500),
    can_resize = false,
})

local function setFontRecursive(guiObject, font)
    for _, obj in pairs(guiObject:GetDescendants()) do
        if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
            obj.Font = font
        end
    end
end

spawn(function()
    repeat wait() until window.gui
    setFontRecursive(window.gui, Enum.Font.SourceSansBold)
end)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local viewTab = window:AddTab("View Status")

local labelMainStats = viewTab:AddLabel("Main Stats")
local labelAdvancedStats = viewTab:AddLabel("Advanced Stats")
local labelCombatStats = viewTab:AddLabel("Combat Stats")
local selectedPlayerLabel = viewTab:AddLabel("Selected: None")

labelAdvancedStats.TextColor3 = Color3.fromRGB(0, 255, 255)
labelAdvancedStats.TextSize = 17

for _, label in ipairs({labelMainStats, labelAdvancedStats, labelCombatStats, selectedPlayerLabel}) do
	label.TextWrapped = true
	label.TextScaled = false
	label.Size = UDim2.new(1, 0, 0, 45)
end

local selectedPlayer = nil

local function abbreviateNumber(n)
	local suffixes = {"", "K", "M", "B", "T", "Qa", "Qi"}
	local i = 1
	while n >= 1000 and i < #suffixes do
		n = n / 1000
		i += 1
	end
	return string.format("%.1f%s", n, suffixes[i])
end

local function formatStat(name, value)
	return name .. ": " .. abbreviateNumber(value)
end

local function getStatValue(folder, name)
	local val = folder and folder:FindFirstChild(name)
	return val and val.Value or 0
end

local function updateStatus(player)
	if not player then return end

	local stats = {}

	local leaderstats = player:FindFirstChild("leaderstats") or player:WaitForChild("leaderstats", 3)
	stats.Strength = getStatValue(leaderstats, "Strength")
	stats.Durability = getStatValue(leaderstats, "Durability")
	stats.Agility = getStatValue(leaderstats, "Agility")
	stats.Rebirths = getStatValue(leaderstats, "Rebirths")
	stats.Kills = getStatValue(leaderstats, "Kills")

	local advStats = player:FindFirstChild("AdvancedStats") or player:WaitForChild("AdvancedStats", 3)
	stats.BaseDurability = getStatValue(advStats, "BaseDurability")
	stats.UltimateBoost = getStatValue(advStats, "UltimateBoost")
	stats.PetBoost = getStatValue(advStats, "PetBoost")
	stats.BaseDamage = getStatValue(advStats, "BaseDamage")
	stats.PetDamage = getStatValue(advStats, "PetDamage")

	local myStats = {}
	local myAdv = LocalPlayer:FindFirstChild("AdvancedStats") or LocalPlayer:WaitForChild("AdvancedStats", 3)
	myStats.BaseDamage = getStatValue(myAdv, "BaseDamage")
	myStats.PetDamage = getStatValue(myAdv, "PetDamage")

	local myDamage = math.max(myStats.BaseDamage, myStats.PetDamage)
	local enemyHP = stats.BaseDurability
	local hitsToKill = myDamage > 0 and math.ceil(enemyHP / myDamage) or "N/A"
	local timeToKill = myDamage > 0 and string.format("%.2fs", hitsToKill * 0.15) or "N/A"

	labelMainStats.Text = table.concat({
		"[Main Stats]",
		"- " .. formatStat("Strength", stats.Strength),
		"- " .. formatStat("Durability", stats.Durability),
		"- " .. formatStat("Agility", stats.Agility),
		"- Rebirths: " .. stats.Rebirths,
		"- Kills: " .. stats.Kills
	}, "\n")

	labelAdvancedStats.Text = table.concat({
		"[Advanced Stats]",
		"- " .. formatStat("Base Durability", stats.BaseDurability),
		"- Ultimate Boost: +" .. stats.UltimateBoost .. "%",
		"- Pet Boost: +" .. stats.PetBoost .. "%",
		"- TOTAL DURABILITY: " .. abbreviateNumber(stats.BaseDurability)
	}, "\n")

	labelCombatStats.Text = table.concat({
		"[Combat Stats]",
		"- Enemy Base Damage: " .. abbreviateNumber(stats.BaseDamage),
		"- Enemy Pet Damage: " .. abbreviateNumber(stats.PetDamage),
		"- Hits to Kill: " .. tostring(hitsToKill),
		"- Time to Kill: " .. tostring(timeToKill)
	}, "\n")
end

local playerDropdown, playerDropdownInstance = viewTab:AddDropdown("Select Player", function(name)
	for _, player in ipairs(Players:GetPlayers()) do
		if player.Name == name then
			selectedPlayer = player
			selectedPlayerLabel.Text = "Selected: " .. player.Name
			updateStatus(player)
			break
		end
	end
end)

local dropdownItems = {}

local function refreshDropdown()
	for _, item in ipairs(dropdownItems) do
		if item.Remove then
			item:Remove()
		elseif typeof(item) == "Instance" then
			item:Destroy()
		end
	end
	table.clear(dropdownItems)

	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			local btn, btnData = playerDropdown:Add(player.Name)
			table.insert(dropdownItems, btnData)
		end
	end
end

viewTab:AddButton("Refresh Players", refreshDropdown)
Players.PlayerAdded:Connect(refreshDropdown)
Players.PlayerRemoving:Connect(refreshDropdown)
refreshDropdown()

coroutine.wrap(function()
	while true do
		task.wait(2)
		if selectedPlayer and selectedPlayer:IsDescendantOf(Players) then
			updateStatus(selectedPlayer)
		end
	end
end)
